# Python program to demonstrate
# hamming code
 
 
def calcRedundantBits(m):
 
    # Use the formula 2 ^ r >= m + r + 1
    # to calculate the no of redundant bits.
    # Iterate over 0 .. m and return the value
    # that satisfies the equation
 
    for i in range(m):
        if(2**i >= m + i + 1):
            return i
 
def posRedundantBits(data, r):
 
    # Redundancy bits are placed at the positions
    # which correspond to the power of 2.
    j = 0
    k = 1
    m = len(data)
    res = ''
 
    # If position is power of 2 then insert '0'
    # Else append the data
    for i in range(1, m + r+1):
        if(i == 2**j):
            res = res + '0'
            j += 1
        else:
            res = res + data[-1 * k]
            k += 1
 
    # The result is reversed since positions are
    # counted backwards. (m + r+1 ... 1)
    return res[::-1]
 
 
def calcParityBits(arr, r):
    n = len(arr)
 
    # For finding rth parity bit, iterate over
    # 0 to r - 1
    for i in range(r):
        val = 0
        for j in range(1, n + 1):
 
       
            if(j & (2**i) == (2**i)):
                val = val ^ int(arr[-1 * j])
              
        arr = arr[:n-(2**i)] + str(val) + arr[n-(2**i)+1:]
    return arr
 
def detectError(arr, nr):
    n = len(arr)
    res = 0
 
    for i in range(nr):
        val = 0
        for j in range(1, n + 1):
            if(j & (2**i) == (2**i)):
                val = val ^ int(arr[-1 * j])
 
        res = res + val*(10**i)
 
    
    return int(str(res), 2)
    
data = '1011001'
 
m = len(data)
r = calcRedundantBits(m)

arr = posRedundantBits(data, r)
 
arr = calcParityBits(arr, r)
 
print("La data transferida es " + arr) 
 
arr = '11101001110'
print("Error Data es " + arr)
correction = detectError(arr, r)
if(correction==0):
    print("No hi ha error.")
else:
    print("La posici√≥ de l'error es",len(arr)-correction+1,"desde l'esquerra")
